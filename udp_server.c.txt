#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <winsock2.h>

#pragma comment(lib, "ws2_32.lib")

#define UDP_PORT 5000
#define BUFFER_SIZE 1024
#define MAX_CLIENTS 100

typedef struct {
    struct sockaddr_in address;
    int active;
} Client;

SOCKET udp_socket;
Client clients[MAX_CLIENTS];

// Function to get current timestamp
void get_timestamp(char *timestamp, size_t size) {
    time_t now = time(NULL);
    struct tm *t = localtime(&now);
    strftime(timestamp, size, "%Y-%m-%d %H:%M:%S", t);
}

// Register a client (if new)
void register_client(struct sockaddr_in client) {
    for (int i = 0; i < MAX_CLIENTS; i++) {
        if (clients[i].active && 
            clients[i].address.sin_addr.s_addr == client.sin_addr.s_addr &&
            clients[i].address.sin_port == client.sin_port) {
            return;  // Client already exists
        }
    }
    for (int i = 0; i < MAX_CLIENTS; i++) {
        if (!clients[i].active) {
            clients[i].address = client;
            clients[i].active = 1;
            printf("ðŸŸ¢ New Client Registered: %s:%d\n", inet_ntoa(client.sin_addr), ntohs(client.sin_port));
            return;
        }
    }
}

// Forward a message to all clients except the sender
void forward_message(char *message, struct sockaddr_in sender) {
    for (int i = 0; i < MAX_CLIENTS; i++) {
        if (clients[i].active &&
            (clients[i].address.sin_addr.s_addr != sender.sin_addr.s_addr ||
             clients[i].address.sin_port != sender.sin_port)) {
            
            sendto(udp_socket, message, strlen(message), 0,
                   (struct sockaddr *)&clients[i].address, sizeof(clients[i].address));
            printf("ðŸ“¤ Forwarded message to %s:%d\n", inet_ntoa(clients[i].address.sin_addr), ntohs(clients[i].address.sin_port));
        }
    }
}

void start_udp_server() {
    struct sockaddr_in server, client;
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(UDP_PORT);

    udp_socket = socket(AF_INET, SOCK_DGRAM, 0);
    bind(udp_socket, (struct sockaddr *)&server, sizeof(server));

    printf("ðŸ“¡ UDP Server running on port %d...\n", UDP_PORT);

    while (1) {
        char buffer[BUFFER_SIZE];
        int client_size = sizeof(client);

        int bytes_received = recvfrom(udp_socket, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client, &client_size);
        if (bytes_received > 0) {
            buffer[bytes_received] = '\0';
            printf("\nðŸ“© Received: %s\n", buffer);

            // Register client
            register_client(client);

            // Forward message to all clients
            forward_message(buffer, client);
        }
    }
}

int main() {
    WSADATA wsa;
    WSAStartup(MAKEWORD(2, 2), &wsa);
    start_udp_server();
    closesocket(udp_socket);
    WSACleanup();
    return 0;
}
